// Code generated by sqlc. DO NOT EDIT.
// source: user_badge.sql

package db

import (
	"context"
)

const createUserBadge = `-- name: CreateUserBadge :one
INSERT INTO user_badge (user_id, badge_id)
VALUES ($1, $2)
RETURNING id, user_id, badge_id
`

type CreateUserBadgeParams struct {
	UserID  int64 `json:"user_id"`
	BadgeID int64 `json:"badge_id"`
}

func (q *Queries) CreateUserBadge(ctx context.Context, arg CreateUserBadgeParams) (UserBadge, error) {
	row := q.db.QueryRowContext(ctx, createUserBadge, arg.UserID, arg.BadgeID)
	var i UserBadge
	err := row.Scan(&i.ID, &i.UserID, &i.BadgeID)
	return i, err
}

const deleteUserBadge = `-- name: DeleteUserBadge :exec
DELETE FROM user_badge
WHERE user_id = $1
`

func (q *Queries) DeleteUserBadge(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserBadge, userID)
	return err
}

const getUserBadge = `-- name: GetUserBadge :one
SELECT badge.id, name, user_badge.id, user_id, badge_id,
  name
FROM badge
  JOIN user_badge ON badge.id = badge_id
  AND user_id = $1
LIMIT 1
`

type GetUserBadgeRow struct {
	ID      int64  `json:"id"`
	Name    string `json:"name"`
	ID_2    int64  `json:"id_2"`
	UserID  int64  `json:"user_id"`
	BadgeID int64  `json:"badge_id"`
	Name_2  string `json:"name_2"`
}

func (q *Queries) GetUserBadge(ctx context.Context, userID int64) (GetUserBadgeRow, error) {
	row := q.db.QueryRowContext(ctx, getUserBadge, userID)
	var i GetUserBadgeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ID_2,
		&i.UserID,
		&i.BadgeID,
		&i.Name_2,
	)
	return i, err
}

const updateUserBadge = `-- name: UpdateUserBadge :one
UPDATE user_badge
SET badge_id = $2
WHERE user_id = $1
RETURNING id, user_id, badge_id
`

type UpdateUserBadgeParams struct {
	UserID  int64 `json:"user_id"`
	BadgeID int64 `json:"badge_id"`
}

func (q *Queries) UpdateUserBadge(ctx context.Context, arg UpdateUserBadgeParams) (UserBadge, error) {
	row := q.db.QueryRowContext(ctx, updateUserBadge, arg.UserID, arg.BadgeID)
	var i UserBadge
	err := row.Scan(&i.ID, &i.UserID, &i.BadgeID)
	return i, err
}
