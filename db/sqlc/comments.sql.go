// Code generated by sqlc. DO NOT EDIT.
// source: comments.sql

package db

import (
	"context"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (author, post_id, body)
VALUES ($1, $2, $3)
RETURNING id, post_id, body, created_at, author
`

type CreateCommentParams struct {
	Author string `json:"author"`
	PostID int64  `json:"post_id"`
	Body   string `json:"body"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.Author, arg.PostID, arg.Body)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
		&i.Author,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteComments = `-- name: DeleteComments :one
DELETE FROM comments
WHERE post_id = $1
RETURNING id, post_id, body, created_at, author
`

func (q *Queries) DeleteComments(ctx context.Context, postID int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, deleteComments, postID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
		&i.Author,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, post_id, body, created_at, author
FROM comments
WHERE id = $1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Body,
		&i.CreatedAt,
		&i.Author,
	)
	return i, err
}

const getCommentsId = `-- name: GetCommentsId :many
SELECT id
FROM comments
WHERE post_id = $1
`

func (q *Queries) GetCommentsId(ctx context.Context, postID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listComments = `-- name: ListComments :many
SELECT id, post_id, body, created_at, author
FROM comments
WHERE post_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type ListCommentsParams struct {
	PostID int64 `json:"post_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListComments(ctx context.Context, arg ListCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listComments, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Body,
			&i.CreatedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
