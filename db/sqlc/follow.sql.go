// Code generated by sqlc. DO NOT EDIT.
// source: follow.sql

package db

import (
	"context"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO follow (following_id, follower_id)
VALUES ($1, $2)
RETURNING id, following_id, follower_id
`

type CreateFollowParams struct {
	FollowingID int64 `json:"following_id"`
	FollowerID  int64 `json:"follower_id"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, createFollow, arg.FollowingID, arg.FollowerID)
	var i Follow
	err := row.Scan(&i.ID, &i.FollowingID, &i.FollowerID)
	return i, err
}

const getFollow = `-- name: GetFollow :one
SELECT id, following_id, follower_id
FROM follow
WHERE following_id = $1
  AND follower_id = $2
LIMIT 1
`

type GetFollowParams struct {
	FollowingID int64 `json:"following_id"`
	FollowerID  int64 `json:"follower_id"`
}

func (q *Queries) GetFollow(ctx context.Context, arg GetFollowParams) (Follow, error) {
	row := q.db.QueryRowContext(ctx, getFollow, arg.FollowingID, arg.FollowerID)
	var i Follow
	err := row.Scan(&i.ID, &i.FollowingID, &i.FollowerID)
	return i, err
}

const listFollow = `-- name: ListFollow :many
SELECT users.id,
  username,
  profile,
  image
FROM follow
  JOIN users ON following_id = users.id
  AND follower_id = $1
ORDER BY id DESC
LIMIT $2 OFFSET $3
`

type ListFollowParams struct {
	FollowerID int64 `json:"follower_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

type ListFollowRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Profile  string `json:"profile"`
	Image    string `json:"image"`
}

func (q *Queries) ListFollow(ctx context.Context, arg ListFollowParams) ([]ListFollowRow, error) {
	rows, err := q.db.QueryContext(ctx, listFollow, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFollowRow{}
	for rows.Next() {
		var i ListFollowRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Profile,
			&i.Image,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
