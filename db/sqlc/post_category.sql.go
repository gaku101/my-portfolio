// Code generated by sqlc. DO NOT EDIT.
// source: post_category.sql

package db

import (
	"context"
)

const createPostCategory = `-- name: CreatePostCategory :one
INSERT INTO post_category (post_id, category_id)
VALUES ($1, $2)
RETURNING id, post_id, category_id
`

type CreatePostCategoryParams struct {
	PostID     int64 `json:"post_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) CreatePostCategory(ctx context.Context, arg CreatePostCategoryParams) (PostCategory, error) {
	row := q.db.QueryRowContext(ctx, createPostCategory, arg.PostID, arg.CategoryID)
	var i PostCategory
	err := row.Scan(&i.ID, &i.PostID, &i.CategoryID)
	return i, err
}

const deletePostCategory = `-- name: DeletePostCategory :exec
DELETE FROM post_category
WHERE post_id = $1
`

func (q *Queries) DeletePostCategory(ctx context.Context, postID int64) error {
	_, err := q.db.ExecContext(ctx, deletePostCategory, postID)
	return err
}

const getPostCategory = `-- name: GetPostCategory :one
SELECT category.id,
  name
FROM category
  JOIN post_category ON category.id = category_id
  AND post_id = $1
LIMIT 1
`

func (q *Queries) GetPostCategory(ctx context.Context, postID int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getPostCategory, postID)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const updatePostCategory = `-- name: UpdatePostCategory :one
UPDATE post_category
SET category_id = $2
WHERE post_id = $1
RETURNING id, post_id, category_id
`

type UpdatePostCategoryParams struct {
	PostID     int64 `json:"post_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) UpdatePostCategory(ctx context.Context, arg UpdatePostCategoryParams) (PostCategory, error) {
	row := q.db.QueryRowContext(ctx, updatePostCategory, arg.PostID, arg.CategoryID)
	var i PostCategory
	err := row.Scan(&i.ID, &i.PostID, &i.CategoryID)
	return i, err
}
