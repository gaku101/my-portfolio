// Code generated by sqlc. DO NOT EDIT.
// source: badge.sql

package db

import (
	"context"
)

const createBadge = `-- name: CreateBadge :one
INSERT INTO badge (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateBadge(ctx context.Context, name string) (Badge, error) {
	row := q.db.QueryRowContext(ctx, createBadge, name)
	var i Badge
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBadge = `-- name: GetBadge :one
SELECT id, name
FROM badge
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBadge(ctx context.Context, id int64) (Badge, error) {
	row := q.db.QueryRowContext(ctx, getBadge, id)
	var i Badge
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listBadges = `-- name: ListBadges :many
SELECT id, name
FROM badge
ORDER BY id
`

func (q *Queries) ListBadges(ctx context.Context) ([]Badge, error) {
	rows, err := q.db.QueryContext(ctx, listBadges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Badge{}
	for rows.Next() {
		var i Badge
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
